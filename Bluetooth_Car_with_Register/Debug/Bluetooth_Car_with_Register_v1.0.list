
Bluetooth_Car_with_Register_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a6c  08001a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a6c  08001a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a74  08001a74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a78  08001a78  00011a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001a88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001a88  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000456e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001069  00000000  00000000  000245aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c0  00000000  00000000  00025a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f06c  00000000  00000000  00025e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000569e  00000000  00000000  00044eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb70c  00000000  00000000  0004a54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f2c  00000000  00000000  00105cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a44 	.word	0x08001a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a44 	.word	0x08001a44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <GPIO_Init>:
#include "stm32f4xx_hal.h"
#include <GPIO.h>


void GPIO_Init(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	 * GPIOA Timer 3 PWM PA6 = Channel 1 PA7 Channel 3
	 * GPIOB Bluetooth UART communication for microcontroller B10 TX, B11 RX
	 * GPIOE Motor Control forward, back vs..
	 */
	//GPIO A, B, D, E, H Clock Enable
	RCC->AHB1ENR |= (1 << 0) | (1 << 1) | (1 << 3) | (1 << 4) | (1 << 7);
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <GPIO_Init+0x90>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a21      	ldr	r2, [pc, #132]	; (8000550 <GPIO_Init+0x90>)
 80004ca:	f043 039b 	orr.w	r3, r3, #155	; 0x9b
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30

	//GPIOA PA6 and PA7 selected alternate function mode
	GPIOA->MODER |= (2 << 12) | (2 << 14);
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <GPIO_Init+0x94>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1f      	ldr	r2, [pc, #124]	; (8000554 <GPIO_Init+0x94>)
 80004d6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80004da:	6013      	str	r3, [r2, #0]
	//GPIOB PB6 and PB7 selected alternate function mode
	GPIOB->MODER |= (2 << 20) | (2 << 22);
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <GPIO_Init+0x98>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <GPIO_Init+0x98>)
 80004e2:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 80004e6:	6013      	str	r3, [r2, #0]
	//GPIOD PD12, PD13, PD14, PD15 selected output mode
	GPIOD->MODER |= (1 << 24) | (1 << 26) | (1 << 28) | (1 << 30);
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <GPIO_Init+0x9c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <GPIO_Init+0x9c>)
 80004ee:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80004f2:	6013      	str	r3, [r2, #0]
	//GPIOE PE9, PE10, PE11 and PE12 selected General purpose output mode
	GPIOE->MODER |= (1 << 18) | (1 << 20) | (1 << 22) | (1 << 24);
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <GPIO_Init+0xa0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a19      	ldr	r2, [pc, #100]	; (8000560 <GPIO_Init+0xa0>)
 80004fa:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 80004fe:	6013      	str	r3, [r2, #0]

	//GPIOE PE9, PE10, PE11 and PE12 selected Output push-pull
	GPIOE->OTYPER |= (0 << 9) | (0 << 10) | (0 << 11) | (0 << 12);
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <GPIO_Init+0xa0>)
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <GPIO_Init+0xa0>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	6053      	str	r3, [r2, #4]
	//GPIOD PD12, PD13, PD14 and PD15 selected Output push-pull
	GPIOD->OTYPER |= (0 << 12) | (0 << 13) | (0 << 14) | (0 << 15);
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <GPIO_Init+0x9c>)
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <GPIO_Init+0x9c>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	6053      	str	r3, [r2, #4]


	//GPIOE PE9, PE10, PE11 and PE12 selected high speed
	GPIOE->OSPEEDR |= (2 << 18) | (2 << 20) | (2 << 22) | (2 << 24);
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <GPIO_Init+0xa0>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <GPIO_Init+0xa0>)
 8000516:	f043 732a 	orr.w	r3, r3, #44564480	; 0x2a80000
 800051a:	6093      	str	r3, [r2, #8]
	//GPIOD PD12, PD13, PD14 and PD15 selected low speed
	GPIOD->OSPEEDR |= (0 << 24) | (0 << 26) | (0 << 28) | (0 << 30);
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <GPIO_Init+0x9c>)
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <GPIO_Init+0x9c>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	6093      	str	r3, [r2, #8]

	//GPIOE PE9, PE10, PE11 and PE12 selected no pull-up/down
	GPIOE->PUPDR |= (0 << 18) | (0 << 20) | (0 << 22) | (0 << 24);
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <GPIO_Init+0xa0>)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <GPIO_Init+0xa0>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	60d3      	str	r3, [r2, #12]
	//GPIOD PD12, PD13, PD14 and PD15 selected no pull-up/down
	GPIOD->PUPDR |= (0 << 24) | (0 << 26) | (0 << 28) | (0 << 30);
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <GPIO_Init+0x9c>)
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <GPIO_Init+0x9c>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	60d3      	str	r3, [r2, #12]

	//GPIOA PA6 and PA7 selected AF2 in AFRL register (TIM3 Selected)
	GPIOA->AFR[0] = (2 << 24) | (2 << 28);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <GPIO_Init+0x94>)
 8000536:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
 800053a:	621a      	str	r2, [r3, #32]
	//GPIOA PB10 and PB11 selected AF7 in AFRH register (UART3 Selected)
	GPIOB->AFR[1] = (7 << 8) | (7 << 12);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <GPIO_Init+0x98>)
 800053e:	f44f 42ee 	mov.w	r2, #30464	; 0x7700
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000
 8000558:	40020400 	.word	0x40020400
 800055c:	40020c00 	.word	0x40020c00
 8000560:	40021000 	.word	0x40021000

08000564 <TIM3_Init>:
#include <PWM.h>

extern uint16_t speed_value;

void TIM3_Init()
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	//TIM3 Clock Enable
	RCC->APB1ENR |= (1 << 1);
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <TIM3_Init+0x90>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <TIM3_Init+0x90>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	6413      	str	r3, [r2, #64]	; 0x40

	TIM3->CR1 &= ~(1 << 4); // DIR = 0 Counter used as upcounter
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <TIM3_Init+0x94>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <TIM3_Init+0x94>)
 800057a:	f023 0310 	bic.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0 << 5); // CMS = 00 Center-aligned mode selected Edge-aligned mode
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <TIM3_Init+0x94>)
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <TIM3_Init+0x94>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0 << 8); // CKD = 00 Clock division selected division 1
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <TIM3_Init+0x94>)
 800058a:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <TIM3_Init+0x94>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6013      	str	r3, [r2, #0]

	//Channel 1 configuration
	TIM3->CCMR1 |= (0 << 0); //CC1S = 00 CC1 channel is configured as output.
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <TIM3_Init+0x94>)
 8000592:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <TIM3_Init+0x94>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (6 << 4); //OC1M = 110 PWM Mode 1 Selected
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <TIM3_Init+0x94>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <TIM3_Init+0x94>)
 800059e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005a2:	6193      	str	r3, [r2, #24]
	//Channel 2 configuration
	TIM3->CCMR1 |= (0 << 8); //CC2S = 00 CC2 channel is configured as output
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <TIM3_Init+0x94>)
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <TIM3_Init+0x94>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (6 << 12); //OC2M = 110 PWM Mode 1 selected
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <TIM3_Init+0x94>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <TIM3_Init+0x94>)
 80005b2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80005b6:	6193      	str	r3, [r2, #24]

	TIM3->CCER |= (1 << 0); //Channel 1 output enable
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <TIM3_Init+0x94>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <TIM3_Init+0x94>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= (1 << 4); //Channel 2 output enable
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <TIM3_Init+0x94>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <TIM3_Init+0x94>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6213      	str	r3, [r2, #32]

	TIM3->PSC = 83; // Prescaler value
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <TIM3_Init+0x94>)
 80005d2:	2253      	movs	r2, #83	; 0x53
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 99; // Counter value, Frequency = 10KHz
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <TIM3_Init+0x94>)
 80005d8:	2263      	movs	r2, #99	; 0x63
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= (1 << 0); // Timer Enable
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <TIM3_Init+0x94>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <TIM3_Init+0x94>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40000400 	.word	0x40000400

080005fc <stop>:
void stop()
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <stop+0x4c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <stop+0x4c>)
 8000606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060a:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <stop+0x4c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <stop+0x4c>)
 8000612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000616:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = 0;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <stop+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <stop+0x4c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <stop+0x4c>)
 8000624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000628:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <stop+0x4c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <stop+0x4c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 0;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <stop+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	40000400 	.word	0x40000400

08000650 <forward>:
void forward()
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 9); // Pin 9 set
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <forward+0x4c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <forward+0x4c>)
 800065a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065e:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <forward+0x4c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <forward+0x4c>)
 8000666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800066a:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <forward+0x50>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <forward+0x54>)
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <forward+0x4c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <forward+0x4c>)
 800067a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800067e:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <forward+0x4c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <forward+0x4c>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 0;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <forward+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	2000002a 	.word	0x2000002a
 80006a4:	40000400 	.word	0x40000400

080006a8 <back>:
void back()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <back+0x4c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <back+0x4c>)
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 10); // Pin 10 set
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <back+0x4c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <back+0x4c>)
 80006be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006c2:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <back+0x50>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <back+0x54>)
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <back+0x4c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <back+0x4c>)
 80006d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006d6:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <back+0x4c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <back+0x4c>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 0;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <back+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	2000002a 	.word	0x2000002a
 80006fc:	40000400 	.word	0x40000400

08000700 <left>:
void left()
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <left+0x4c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <left+0x4c>)
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <left+0x4c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <left+0x4c>)
 8000716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800071a:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = 0;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <left+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset		turn right
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <left+0x4c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <left+0x4c>)
 8000728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800072c:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 12); //Pin 12 set			turn left
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <left+0x4c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <left+0x4c>)
 8000734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000738:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <left+0x50>)
 800073c:	2232      	movs	r2, #50	; 0x32
 800073e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40000400 	.word	0x40000400

08000754 <right>:
void right()
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <right+0x4c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <right+0x4c>)
 800075e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000762:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <right+0x4c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <right+0x4c>)
 800076a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800076e:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = 0;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <right+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 11); //Pin 11 set			turn right
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <right+0x4c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <right+0x4c>)
 800077c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000780:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset		turn left
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <right+0x4c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <right+0x4c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <right+0x50>)
 8000790:	2232      	movs	r2, #50	; 0x32
 8000792:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40000400 	.word	0x40000400

080007a8 <forward_left>:
void forward_left()
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 9); // Pin 9 set			motor forward
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <forward_left+0x4c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <forward_left+0x4c>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset		motor back
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <forward_left+0x4c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <forward_left+0x4c>)
 80007be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007c2:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <forward_left+0x50>)
 80007c6:	881a      	ldrh	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <forward_left+0x54>)
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset		turn right
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <forward_left+0x4c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <forward_left+0x4c>)
 80007d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007d6:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 12); //Pin 12 set			turn left
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <forward_left+0x4c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <forward_left+0x4c>)
 80007de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e2:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <forward_left+0x54>)
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	2000002a 	.word	0x2000002a
 80007fc:	40000400 	.word	0x40000400

08000800 <forward_right>:
void forward_right()
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 9); // Pin 9 set			motor forward
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <forward_right+0x4c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <forward_right+0x4c>)
 800080a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800080e:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 26); // Pin 10 reset		motor back
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <forward_right+0x4c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <forward_right+0x4c>)
 8000816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800081a:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <forward_right+0x50>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <forward_right+0x54>)
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 11); //Pin 11 set			turn right
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <forward_right+0x4c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <forward_right+0x4c>)
 800082a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800082e:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset		turn left
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <forward_right+0x4c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <forward_right+0x4c>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <forward_right+0x54>)
 800083e:	2232      	movs	r2, #50	; 0x32
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	2000002a 	.word	0x2000002a
 8000854:	40000400 	.word	0x40000400

08000858 <back_left>:
void back_left()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <back_left+0x4c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <back_left+0x4c>)
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000866:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 10); // Pin 10 set
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <back_left+0x4c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <back_left+0x4c>)
 800086e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000872:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <back_left+0x50>)
 8000876:	881a      	ldrh	r2, [r3, #0]
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <back_left+0x54>)
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 27); //Pin 11 reset		turn right
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <back_left+0x4c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <back_left+0x4c>)
 8000882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000886:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 12); //Pin 12 set			turn left
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <back_left+0x4c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <back_left+0x4c>)
 800088e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000892:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <back_left+0x54>)
 8000896:	2232      	movs	r2, #50	; 0x32
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000
 80008a8:	2000002a 	.word	0x2000002a
 80008ac:	40000400 	.word	0x40000400

080008b0 <back_right>:
void back_right()
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	GPIOE->BSRR |= (1 << 25); // Pin 9 reset
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <back_right+0x4c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <back_right+0x4c>)
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 10); // Pin 10 set
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <back_right+0x4c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <back_right+0x4c>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ca:	6193      	str	r3, [r2, #24]
	TIM3->CCR1 = speed_value;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <back_right+0x50>)
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <back_right+0x54>)
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOE->BSRR |= (1 << 11); //Pin 11 set			turn right
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <back_right+0x4c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a08      	ldr	r2, [pc, #32]	; (80008fc <back_right+0x4c>)
 80008da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008de:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR |= (1 << 28); //Pin 12 reset		turn left
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <back_right+0x4c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <back_right+0x4c>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = 50;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <back_right+0x54>)
 80008ee:	2232      	movs	r2, #50	; 0x32
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	2000002a 	.word	0x2000002a
 8000904:	40000400 	.word	0x40000400

08000908 <light_on>:
void light_on()
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	GPIOD->BSRR |= (1 << 12) | (1 << 13) | (1 << 14) | (1 << 15);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <light_on+0x1c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <light_on+0x1c>)
 8000912:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000916:	6193      	str	r3, [r2, #24]

}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40020c00 	.word	0x40020c00

08000928 <light_off>:
void light_off()
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	GPIOD->BSRR |= (1 << 28) | (1 << 29) | (1 << 30) | (1 << 31);
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <light_off+0x1c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <light_off+0x1c>)
 8000932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000936:	6193      	str	r3, [r2, #24]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40020c00 	.word	0x40020c00

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0b      	blt.n	8000972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4907      	ldr	r1, [pc, #28]	; (8000980 <__NVIC_EnableIRQ+0x38>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100

08000984 <UART_Init>:

uint16_t speed_value;
uint16_t speed_level;

void UART_Init()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 18); //USART3 Clock Enable
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <UART_Init+0x78>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <UART_Init+0x78>)
 800098e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40

	USART3->CR1 |= (1 << 2); //RE=1 Receiver Enable
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <UART_Init+0x7c>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <UART_Init+0x7c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= (1 << 3); //TE=1 Transmitter Enable
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <UART_Init+0x7c>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <UART_Init+0x7c>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= (1 << 5) | (1 << 7); // RXNEIE and TXEIE Enabled
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <UART_Init+0x7c>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <UART_Init+0x7c>)
 80009b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009b6:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~(1 << 10); // Parity control disable
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <UART_Init+0x7c>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <UART_Init+0x7c>)
 80009be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009c2:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~(1 << 12); // 1 Start bit, 8 Data bits, n Stop bit selected
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <UART_Init+0x7c>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <UART_Init+0x7c>)
 80009ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ce:	60d3      	str	r3, [r2, #12]

	USART3->CR2 &= ~(1 << 12); // STOP bit selected 1 Stop bit
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <UART_Init+0x7c>)
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <UART_Init+0x7c>)
 80009d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009da:	6113      	str	r3, [r2, #16]

	USART3->BRR = 0x1117; // BaudRate 9600
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <UART_Init+0x7c>)
 80009de:	f241 1217 	movw	r2, #4375	; 0x1117
 80009e2:	609a      	str	r2, [r3, #8]

	USART3->CR1 |= (1 << 13); //USART Enabled
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <UART_Init+0x7c>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <UART_Init+0x7c>)
 80009ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ee:	60d3      	str	r3, [r2, #12]

	//ENABLE interrupt for USART3 on NVIC side
	NVIC_EnableIRQ(USART3_IRQn);
 80009f0:	2027      	movs	r0, #39	; 0x27
 80009f2:	f7ff ffa9 	bl	8000948 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40004800 	.word	0x40004800

08000a04 <UART_GetChar>:
uint8_t UART_GetChar(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
		2. Read the data from USART_DR  Register. This also clears the RXNE bit

		****************************************/
	uint8_t data;

	while(!(USART3->SR & (1 << 5))); // Wait for RXNE to SET..
 8000a0a:	bf00      	nop
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <UART_GetChar+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0320 	and.w	r3, r3, #32
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f9      	beq.n	8000a0c <UART_GetChar+0x8>
									 // This indicates that the data has been Received
	data = USART3->DR; // Read the data
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <UART_GetChar+0x28>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	71fb      	strb	r3, [r7, #7]
	return data;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40004800 	.word	0x40004800

08000a30 <UART_SendChar>:
void UART_SendChar(char c)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & (1 << 7))); // Wait for TXE bit set...
 8000a3a:	bf00      	nop
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <UART_SendChar+0x2c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <UART_SendChar+0xc>
									// This indicates that the data has been transmitted
	USART3->DR = c; // Load the data
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <UART_SendChar+0x2c>)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	6053      	str	r3, [r2, #4]

}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40004800 	.word	0x40004800

08000a60 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
 {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	uint32_t incoming_data = UART_GetChar();
 8000a66:	f7ff ffcd 	bl	8000a04 <UART_GetChar>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3b30      	subs	r3, #48	; 0x30
 8000a72:	2b47      	cmp	r3, #71	; 0x47
 8000a74:	f200 8110 	bhi.w	8000c98 <USART3_IRQHandler+0x238>
 8000a78:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <USART3_IRQHandler+0x20>)
 8000a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7e:	bf00      	nop
 8000a80:	08000ba1 	.word	0x08000ba1
 8000a84:	08000ba1 	.word	0x08000ba1
 8000a88:	08000ba1 	.word	0x08000ba1
 8000a8c:	08000ba1 	.word	0x08000ba1
 8000a90:	08000bb3 	.word	0x08000bb3
 8000a94:	08000bb3 	.word	0x08000bb3
 8000a98:	08000bb3 	.word	0x08000bb3
 8000a9c:	08000bc5 	.word	0x08000bc5
 8000aa0:	08000bc5 	.word	0x08000bc5
 8000aa4:	08000bc5 	.word	0x08000bc5
 8000aa8:	08000c99 	.word	0x08000c99
 8000aac:	08000c99 	.word	0x08000c99
 8000ab0:	08000c99 	.word	0x08000c99
 8000ab4:	08000c99 	.word	0x08000c99
 8000ab8:	08000c99 	.word	0x08000c99
 8000abc:	08000c99 	.word	0x08000c99
 8000ac0:	08000c99 	.word	0x08000c99
 8000ac4:	08000c99 	.word	0x08000c99
 8000ac8:	08000c09 	.word	0x08000c09
 8000acc:	08000c99 	.word	0x08000c99
 8000ad0:	08000c99 	.word	0x08000c99
 8000ad4:	08000c99 	.word	0x08000c99
 8000ad8:	08000bf9 	.word	0x08000bf9
 8000adc:	08000c39 	.word	0x08000c39
 8000ae0:	08000c59 	.word	0x08000c59
 8000ae4:	08000c49 	.word	0x08000c49
 8000ae8:	08000c69 	.word	0x08000c69
 8000aec:	08000c99 	.word	0x08000c99
 8000af0:	08000c19 	.word	0x08000c19
 8000af4:	08000c99 	.word	0x08000c99
 8000af8:	08000c99 	.word	0x08000c99
 8000afc:	08000c99 	.word	0x08000c99
 8000b00:	08000c99 	.word	0x08000c99
 8000b04:	08000c99 	.word	0x08000c99
 8000b08:	08000c29 	.word	0x08000c29
 8000b0c:	08000be9 	.word	0x08000be9
 8000b10:	08000c99 	.word	0x08000c99
 8000b14:	08000c99 	.word	0x08000c99
 8000b18:	08000c99 	.word	0x08000c99
 8000b1c:	08000c79 	.word	0x08000c79
 8000b20:	08000c99 	.word	0x08000c99
 8000b24:	08000c99 	.word	0x08000c99
 8000b28:	08000c99 	.word	0x08000c99
 8000b2c:	08000c99 	.word	0x08000c99
 8000b30:	08000c99 	.word	0x08000c99
 8000b34:	08000c99 	.word	0x08000c99
 8000b38:	08000c99 	.word	0x08000c99
 8000b3c:	08000c99 	.word	0x08000c99
 8000b40:	08000c99 	.word	0x08000c99
 8000b44:	08000c99 	.word	0x08000c99
 8000b48:	08000c99 	.word	0x08000c99
 8000b4c:	08000c99 	.word	0x08000c99
 8000b50:	08000c99 	.word	0x08000c99
 8000b54:	08000c99 	.word	0x08000c99
 8000b58:	08000c99 	.word	0x08000c99
 8000b5c:	08000c99 	.word	0x08000c99
 8000b60:	08000c99 	.word	0x08000c99
 8000b64:	08000c99 	.word	0x08000c99
 8000b68:	08000c99 	.word	0x08000c99
 8000b6c:	08000c99 	.word	0x08000c99
 8000b70:	08000c99 	.word	0x08000c99
 8000b74:	08000c99 	.word	0x08000c99
 8000b78:	08000c99 	.word	0x08000c99
 8000b7c:	08000c99 	.word	0x08000c99
 8000b80:	08000c99 	.word	0x08000c99
 8000b84:	08000bd7 	.word	0x08000bd7
 8000b88:	08000c99 	.word	0x08000c99
 8000b8c:	08000c99 	.word	0x08000c99
 8000b90:	08000c99 	.word	0x08000c99
 8000b94:	08000c99 	.word	0x08000c99
 8000b98:	08000c99 	.word	0x08000c99
 8000b9c:	08000c89 	.word	0x08000c89

	switch(incoming_data)
	{
		case '0': case '1': case '2': case '3':
			UART_SendChar(incoming_data);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff43 	bl	8000a30 <UART_SendChar>
			speed_value = MAX_SPEED * 0;
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <USART3_IRQHandler+0x240>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]
			break;
 8000bb0:	e072      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case '4': case '5': case '6':
			UART_SendChar(incoming_data);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff3a 	bl	8000a30 <UART_SendChar>
			speed_value = MAX_SPEED - 50;
 8000bbc:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <USART3_IRQHandler+0x240>)
 8000bbe:	2232      	movs	r2, #50	; 0x32
 8000bc0:	801a      	strh	r2, [r3, #0]
			break;
 8000bc2:	e069      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case '7': case '8': case '9':
			UART_SendChar(incoming_data);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff31 	bl	8000a30 <UART_SendChar>
			speed_value = MAX_SPEED - 30;
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <USART3_IRQHandler+0x240>)
 8000bd0:	2246      	movs	r2, #70	; 0x46
 8000bd2:	801a      	strh	r2, [r3, #0]
			break;
 8000bd4:	e060      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'q':
			UART_SendChar(incoming_data);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff28 	bl	8000a30 <UART_SendChar>
			speed_value = MAX_SPEED;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <USART3_IRQHandler+0x240>)
 8000be2:	2264      	movs	r2, #100	; 0x64
 8000be4:	801a      	strh	r2, [r3, #0]
			break;
 8000be6:	e057      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'S':
			UART_SendChar(incoming_data);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff1f 	bl	8000a30 <UART_SendChar>
			stop();
 8000bf2:	f7ff fd03 	bl	80005fc <stop>
			break;
 8000bf6:	e04f      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'F':
			UART_SendChar(incoming_data);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff17 	bl	8000a30 <UART_SendChar>
			forward();
 8000c02:	f7ff fd25 	bl	8000650 <forward>
			break;
 8000c06:	e047      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'B':
			UART_SendChar(incoming_data);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff0f 	bl	8000a30 <UART_SendChar>
			back();
 8000c12:	f7ff fd49 	bl	80006a8 <back>
			break;
 8000c16:	e03f      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'L':
			UART_SendChar(incoming_data);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff07 	bl	8000a30 <UART_SendChar>
			left();
 8000c22:	f7ff fd6d 	bl	8000700 <left>
			break;
 8000c26:	e037      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'R':
			UART_SendChar(incoming_data);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feff 	bl	8000a30 <UART_SendChar>
			right();
 8000c32:	f7ff fd8f 	bl	8000754 <right>
			break;
 8000c36:	e02f      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'G':
			UART_SendChar(incoming_data);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fef7 	bl	8000a30 <UART_SendChar>
			forward_left();
 8000c42:	f7ff fdb1 	bl	80007a8 <forward_left>
			break;
 8000c46:	e027      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'I':
			UART_SendChar(incoming_data);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff feef 	bl	8000a30 <UART_SendChar>
			forward_right();
 8000c52:	f7ff fdd5 	bl	8000800 <forward_right>
			break;
 8000c56:	e01f      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'H':
			UART_SendChar(incoming_data);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fee7 	bl	8000a30 <UART_SendChar>
			back_left();
 8000c62:	f7ff fdf9 	bl	8000858 <back_left>
			break;
 8000c66:	e017      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'J':
			UART_SendChar(incoming_data);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fedf 	bl	8000a30 <UART_SendChar>
			back_right();
 8000c72:	f7ff fe1d 	bl	80008b0 <back_right>
			break;
 8000c76:	e00f      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'W':
			UART_SendChar(incoming_data);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fed7 	bl	8000a30 <UART_SendChar>
			light_on();
 8000c82:	f7ff fe41 	bl	8000908 <light_on>
			break;
 8000c86:	e007      	b.n	8000c98 <USART3_IRQHandler+0x238>
		case 'w':
			UART_SendChar(incoming_data);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fecf 	bl	8000a30 <UART_SendChar>
			light_off();
 8000c92:	f7ff fe49 	bl	8000928 <light_off>
	}

}
 8000c96:	e7ff      	b.n	8000c98 <USART3_IRQHandler+0x238>
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000002a 	.word	0x2000002a

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 f908 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f808 	bl	8000cc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  GPIO_Init();
 8000cb0:	f7ff fc06 	bl	80004c0 <GPIO_Init>
  TIM3_Init();
 8000cb4:	f7ff fc56 	bl	8000564 <TIM3_Init>
  UART_Init();
 8000cb8:	f7ff fe64 	bl	8000984 <UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <main+0x18>
	...

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 feb0 	bl	8001a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d30:	2308      	movs	r3, #8
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fa10 	bl	800116c <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d52:	f000 f81f 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2105      	movs	r1, #5
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fc71 	bl	800165c <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d80:	f000 f808 	bl	8000d94 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3750      	adds	r7, #80	; 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f000 f990 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f890 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f000 fda9 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff ff03 	bl	8000ca4 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eac:	08001a7c 	.word	0x08001a7c
  ldr r2, =_sbss
 8000eb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb4:	20000030 	.word	0x20000030

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f90d 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff ff56 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f917 	bl	8001152 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f8ed 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000002c 	.word	0x2000002c

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000002c 	.word	0x2000002c

08000fa0 <__NVIC_SetPriorityGrouping>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff47 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5c 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e264      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d075      	beq.n	8001276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	4ba3      	ldr	r3, [pc, #652]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b04      	cmp	r3, #4
 8001194:	d00c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4ba0      	ldr	r3, [pc, #640]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d112      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4b9d      	ldr	r3, [pc, #628]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ae:	d10b      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4b99      	ldr	r3, [pc, #612]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d05b      	beq.n	8001274 <HAL_RCC_OscConfig+0x108>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d157      	bne.n	8001274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e23f      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x74>
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a90      	ldr	r2, [pc, #576]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xb0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x98>
 80011ea:	4b8b      	ldr	r3, [pc, #556]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a8a      	ldr	r2, [pc, #552]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a87      	ldr	r2, [pc, #540]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xb0>
 8001204:	4b84      	ldr	r3, [pc, #528]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a83      	ldr	r2, [pc, #524]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b81      	ldr	r3, [pc, #516]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a80      	ldr	r2, [pc, #512]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff feb0 	bl	8000f88 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff feac 	bl	8000f88 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e204      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xc0>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fe9c 	bl	8000f88 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fe98 	bl	8000f88 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1f0      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0xe8>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d063      	beq.n	800134a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	4b65      	ldr	r3, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	2b08      	cmp	r3, #8
 8001298:	d11c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x152>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e1c4      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b56      	ldr	r3, [pc, #344]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4952      	ldr	r1, [pc, #328]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	e03a      	b.n	800134a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b4f      	ldr	r3, [pc, #316]	; (800141c <HAL_RCC_OscConfig+0x2b0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fe51 	bl	8000f88 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fe4d 	bl	8000f88 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1a5      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4940      	ldr	r1, [pc, #256]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e015      	b.n	800134a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131e:	4b3f      	ldr	r3, [pc, #252]	; (800141c <HAL_RCC_OscConfig+0x2b0>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fe30 	bl	8000f88 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff fe2c 	bl	8000f88 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e184      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d030      	beq.n	80013b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d016      	beq.n	800138c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_RCC_OscConfig+0x2b4>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fe10 	bl	8000f88 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fe0c 	bl	8000f88 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e164      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x200>
 800138a:	e015      	b.n	80013b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x2b4>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fdf9 	bl	8000f88 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff fdf5 	bl	8000f88 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e14d      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a0 	beq.w	8001506 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10f      	bne.n	80013f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_OscConfig+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d121      	bne.n	8001446 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_RCC_OscConfig+0x2b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff fdbb 	bl	8000f88 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	e011      	b.n	800143a <HAL_RCC_OscConfig+0x2ce>
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
 8001424:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff fdae 	bl	8000f88 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e106      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b85      	ldr	r3, [pc, #532]	; (8001650 <HAL_RCC_OscConfig+0x4e4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d106      	bne.n	800145c <HAL_RCC_OscConfig+0x2f0>
 800144e:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	4a80      	ldr	r2, [pc, #512]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6713      	str	r3, [r2, #112]	; 0x70
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x32a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x312>
 8001464:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b78      	ldr	r3, [pc, #480]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a77      	ldr	r2, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x32a>
 800147e:	4b75      	ldr	r3, [pc, #468]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a74      	ldr	r2, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a71      	ldr	r2, [pc, #452]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff fd73 	bl	8000f88 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fd6f 	bl	8000f88 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0c5      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x33a>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fd5d 	bl	8000f88 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fd59 	bl	8000f88 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0af      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a55      	ldr	r2, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 809b 	beq.w	8001646 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d05c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d141      	bne.n	80015a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4ec>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fd2d 	bl	8000f88 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fd29 	bl	8000f88 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e081      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	019b      	lsls	r3, r3, #6
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	3b01      	subs	r3, #1
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	061b      	lsls	r3, r3, #24
 8001574:	4937      	ldr	r1, [pc, #220]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4ec>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fd02 	bl	8000f88 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fcfe 	bl	8000f88 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e056      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x41c>
 80015a6:	e04e      	b.n	8001646 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_OscConfig+0x4ec>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fceb 	bl	8000f88 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fce7 	bl	8000f88 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e03f      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x44a>
 80015d4:	e037      	b.n	8001646 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e032      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d028      	beq.n	8001642 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d121      	bne.n	8001642 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d11a      	bne.n	8001642 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001612:	4013      	ands	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001618:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40007000 	.word	0x40007000
 8001654:	40023800 	.word	0x40023800
 8001658:	42470060 	.word	0x42470060

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cc      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d90c      	bls.n	8001698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0b8      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a52      	ldr	r2, [pc, #328]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	494d      	ldr	r1, [pc, #308]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d044      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d119      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	2b03      	cmp	r3, #3
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e067      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4934      	ldr	r1, [pc, #208]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff fc1c 	bl	8000f88 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff fc18 	bl	8000f88 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e04f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d20c      	bcs.n	80017a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e032      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4916      	ldr	r1, [pc, #88]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	490e      	ldr	r1, [pc, #56]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e2:	f000 f821 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	490a      	ldr	r1, [pc, #40]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	5ccb      	ldrb	r3, [r1, r3]
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb7c 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00
 8001818:	40023800 	.word	0x40023800
 800181c:	08001a5c 	.word	0x08001a5c
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	2300      	movs	r3, #0
 800183a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001840:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d00d      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x40>
 800184c:	2b08      	cmp	r3, #8
 800184e:	f200 80bd 	bhi.w	80019cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x34>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d003      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x3a>
 800185a:	e0b7      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800185e:	60bb      	str	r3, [r7, #8]
       break;
 8001860:	e0b7      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001862:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001864:	60bb      	str	r3, [r7, #8]
      break;
 8001866:	e0b4      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001868:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001870:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001872:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04d      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	461a      	mov	r2, r3
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	ea02 0800 	and.w	r8, r2, r0
 8001896:	ea03 0901 	and.w	r9, r3, r1
 800189a:	4640      	mov	r0, r8
 800189c:	4649      	mov	r1, r9
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ac:	0142      	lsls	r2, r0, #5
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	ebb0 0008 	subs.w	r0, r0, r8
 80018b6:	eb61 0109 	sbc.w	r1, r1, r9
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	018b      	lsls	r3, r1, #6
 80018c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018c8:	0182      	lsls	r2, r0, #6
 80018ca:	1a12      	subs	r2, r2, r0
 80018cc:	eb63 0301 	sbc.w	r3, r3, r1
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	00d9      	lsls	r1, r3, #3
 80018da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018de:	00d0      	lsls	r0, r2, #3
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	eb12 0208 	adds.w	r2, r2, r8
 80018e8:	eb43 0309 	adc.w	r3, r3, r9
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0259      	lsls	r1, r3, #9
 80018f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018fa:	0250      	lsls	r0, r2, #9
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f7fe fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e04a      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	461a      	mov	r2, r3
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	ea02 0400 	and.w	r4, r2, r0
 8001932:	ea03 0501 	and.w	r5, r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	014b      	lsls	r3, r1, #5
 8001944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001948:	0142      	lsls	r2, r0, #5
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	1b00      	subs	r0, r0, r4
 8001950:	eb61 0105 	sbc.w	r1, r1, r5
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	018b      	lsls	r3, r1, #6
 800195e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001962:	0182      	lsls	r2, r0, #6
 8001964:	1a12      	subs	r2, r2, r0
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	00d9      	lsls	r1, r3, #3
 8001974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001978:	00d0      	lsls	r0, r2, #3
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	1912      	adds	r2, r2, r4
 8001980:	eb45 0303 	adc.w	r3, r5, r3
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0299      	lsls	r1, r3, #10
 800198e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001992:	0290      	lsls	r0, r2, #10
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7fe fc10 	bl	80001c8 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	60bb      	str	r3, [r7, #8]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019ce:	60bb      	str	r3, [r7, #8]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	68bb      	ldr	r3, [r7, #8]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	007a1200 	.word	0x007a1200

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4d0d      	ldr	r5, [pc, #52]	; (8001a24 <__libc_init_array+0x38>)
 80019f0:	4c0d      	ldr	r4, [pc, #52]	; (8001a28 <__libc_init_array+0x3c>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	2600      	movs	r6, #0
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	4d0b      	ldr	r5, [pc, #44]	; (8001a2c <__libc_init_array+0x40>)
 80019fe:	4c0c      	ldr	r4, [pc, #48]	; (8001a30 <__libc_init_array+0x44>)
 8001a00:	f000 f820 	bl	8001a44 <_init>
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	2600      	movs	r6, #0
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	08001a74 	.word	0x08001a74
 8001a28:	08001a74 	.word	0x08001a74
 8001a2c:	08001a74 	.word	0x08001a74
 8001a30:	08001a78 	.word	0x08001a78

08001a34 <memset>:
 8001a34:	4402      	add	r2, r0
 8001a36:	4603      	mov	r3, r0
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <memset+0xa>
 8001a3c:	4770      	bx	lr
 8001a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a42:	e7f9      	b.n	8001a38 <memset+0x4>

08001a44 <_init>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr

08001a50 <_fini>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	bf00      	nop
 8001a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a56:	bc08      	pop	{r3}
 8001a58:	469e      	mov	lr, r3
 8001a5a:	4770      	bx	lr
